import Mathlib
open BigOperators

open Nat Set MeasureTheory Topology Filter

--TODO: (George) Check for Euclidean.dist issues when migrating to v4.9.0
theorem putnam_1973_a1
(A B C X Y Z : EuclideanSpace ‚Ñù (Fin 2))
(hnoncol : ¬¨Collinear ‚Ñù {A, B, C})
(hX : X ‚àà segment ‚Ñù B C)
(hY : Y ‚àà segment ‚Ñù C A)
(hZ : Z ‚àà segment ‚Ñù A B)
: (Euclidean.dist B X ‚â§ Euclidean.dist X C ‚àß Euclidean.dist C Y ‚â§ Euclidean.dist Y A ‚àß Euclidean.dist A Z ‚â§ Euclidean.dist Z B ‚Üí
volume (convexHull ‚Ñù {X, Y, Z}) ‚â• (1/4) * volume (convexHull ‚Ñù {A, B, C})) ‚àß
sInf {volume (convexHull ‚Ñù {A, Z, Y}), volume (convexHull ‚Ñù {B, X, Z}), volume (convexHull ‚Ñù {C, Y, X})} ‚â§ volume (convexHull ‚Ñù {X, Y, Z}) :=
sorry

abbrev putnam_1973_a2_solution : Prop := sorry
-- True
theorem putnam_1973_a2
(L : List ‚Ñù)
(hL : L.length = 8 ‚àß ‚àÄ i : Fin L.length, L[i] = 1 ‚à® L[i] = -1)
(pluses : ‚Ñï := {i : Fin L.length | L[i] = 1}.ncard)
(S : ‚Ñï ‚Üí ‚Ñù := fun n : ‚Ñï ‚Ü¶ ‚àë i in Finset.Icc 1 n, L[i % 8]/i)
: (pluses = 4 ‚Üí ‚àÉ l : ‚Ñù, Tendsto S atTop (ùìù l)) ‚àß (putnam_1973_a2_solution ‚Üî (‚àÉ l : ‚Ñù, Tendsto S atTop (ùìù l)) ‚Üí pluses = 4) :=
sorry

theorem putnam_1973_a3
(b : ‚Ñ§ ‚Üí ‚Ñù := fun n => sInf {k + (n : ‚Ñù)/(k : ‚Ñù) | k > (0 : ‚Ñ§)})
: ‚àÄ n : ‚Ñ§, n > 0 ‚Üí floor (b n) = floor (Real.sqrt (4 * n + 1)) :=
sorry

abbrev putnam_1973_a4_solution : ‚Ñï := sorry
-- 3
theorem putnam_1973_a4
(f : ‚Ñù ‚Üí ‚Ñù := fun x => 2^x - 1 - x^2)
: putnam_1973_a4_solution = {x : ‚Ñù | f x = 0}.ncard :=
sorry

-- Note: Uses the slope/intercept formulation of line in the plane
theorem putnam_1973_a6
(h_nint : ‚Ñï ‚Üí (Fin 7 ‚Üí (‚Ñù √ó ‚Ñù)) ‚Üí ‚Ñï := fun n lines => {p : ‚Ñù √ó ‚Ñù | ‚àÉ! S : Set (Fin 7), S.ncard = n ‚àß p ‚àà ‚ãÇ i ‚àà S, {pts | pts.2 = (lines i).1 * pts.1 + (lines i).2}}.ncard)
: ¬¨ ‚àÉ lines : Fin 7 ‚Üí (‚Ñù √ó ‚Ñù), (‚àÄ i j : Fin 7, i ‚â† j ‚Üí lines i ‚â† lines j) ‚àß h_nint 3 lines ‚â• 6 ‚àß h_nint 2 lines ‚â• 4 :=
sorry

theorem putnam_1973_b1
(n : ‚Ñï)
(a : Finset.Icc 1 (2 * n + 1) ‚Üí ‚Ñ§)
(h_remove : ‚àÄ S : Finset (Finset.Icc 1 (2 * n + 1)), S.card = 2*n ‚Üí ‚àÉ T, T ‚äÜ S ‚àß T.card = n ‚àß ‚àë i in T, a i = ‚àë i in (S \ T), a i)
: ‚àÄ i j : Finset.Icc 1 (2 * n + 1), a i = a j :=
sorry

theorem putnam_1973_b2
(z : ‚ÑÇ)
(hzrat : ‚àÉ q1 q2 : ‚Ñö, z.re = q1 ‚àß z.im = q2)
(hznorm : ‚Äñz‚Äñ = 1)
: ‚àÄ n : ‚Ñ§, ‚àÉ q : ‚Ñö, ‚Äñz^(2*n) - 1‚Äñ = q :=
sorry

theorem putnam_1973_b3
(p : ‚Ñï)
(pgt1 : p > 1)
(hprime : ‚àÄ x ‚àà Set.Ico 0 p, Nat.Prime (x^2 - x + p))
: ‚àÉ! triple : ‚Ñ§ √ó ‚Ñ§ √ó ‚Ñ§, let (a,b,c) := triple; b^2 - 4*a*c = 1 - 4*p ‚àß 0 < a ‚àß a ‚â§ c ‚àß -a ‚â§ b ‚àß b < a :=
sorry

-- Note: Boosted domain to ‚Ñù, which is fine because you can extend any such function f from [0,1] to ‚Ñù satisfying the same properties. There may be multiple correct answers.
abbrev putnam_1973_b4_solution : ‚Ñù ‚Üí ‚Ñù := sorry
-- (fun x => x)
theorem putnam_1973_b4
(f : ‚Ñù ‚Üí ‚Ñù)
(hprop : (‚Ñù ‚Üí ‚Ñù) ‚Üí Prop := fun g => ContDiff ‚Ñù 1 g ‚àß (‚àÄ x : ‚Ñù, 0 < deriv g x ‚àß deriv g x ‚â§ 1) ‚àß g 0 = 0)
(hf : hprop f)
: (‚à´ x in Icc 0 1, f x)^2 ‚â• ‚à´ x in Icc 0 1, (f x)^3 ‚àß (hprop putnam_1973_b4_solution ‚àß (‚à´ x in Icc 0 1, putnam_1973_b4_solution x)^2 = ‚à´ x in Icc 0 1, (putnam_1973_b4_solution x)^3) :=
sorry
