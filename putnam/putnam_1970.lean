import Mathlib
open BigOperators

open Metric Set EuclideanGeometry

theorem putnam_1970_a1
(a b : ‚Ñù)
(ha : a > 0)
(hb : b > 0)
(f : ‚Ñù ‚Üí ‚Ñù := fun x : ‚Ñù => Real.exp (a*x) * Real.cos (b*x))
(p : ‚Ñï ‚Üí ‚Ñù)
(hp : ‚àÉ c : ‚Ñù, c > 0 ‚àß ‚àÄ x ‚àà ball 0 c, ‚àë' n : ‚Ñï, (p n)*x^n = f x)
(S : Set ‚Ñï := {n : ‚Ñï | p n = 0})
: S = ‚àÖ ‚à® ¬¨Finite S :=
sorry

theorem putnam_1970_a2
(A B C D E F G : ‚Ñù)
(hle : B^2 - 4*A*C < 0)
: ‚àÉ Œ¥ > 0, ¬¨‚àÉ x y : ‚Ñù, x^2 + y^2 ‚àà Set.Ioo 0 (Œ¥^2) ‚àß
A*x^2 + B*x*y + C*y^2 + D*x^3 + E*x^2*y + F*x*y^2 + G*y^3 = 0 :=
sorry

abbrev putnam_1970_a3_solution : ‚Ñï √ó ‚Ñï := sorry
-- (3, 1444)
theorem putnam_1970_a3
(L : ‚Ñï ‚Üí ‚Ñï)
(hL : ‚àÄ n : ‚Ñï, L n ‚â§ (Nat.digits 10 n).length ‚àß
(‚àÄ k : ‚Ñï, k < L n ‚Üí (Nat.digits 10 n)[k]! = (Nat.digits 10 n)[0]!) ‚àß
(L n ‚â† (Nat.digits 10 n).length ‚Üí (Nat.digits 10 n)[L n]! ‚â† (Nat.digits 10 n)[0]!))
: (‚àÉ n : ‚Ñï, (Nat.digits 10 (n^2))[0]! ‚â† 0 ‚àß L (n^2) = putnam_1970_a3_solution.1) ‚àß
(‚àÄ n : ‚Ñï, (Nat.digits 10 (n^2))[0]! ‚â† 0 ‚Üí L (n^2) ‚â§ putnam_1970_a3_solution.1) ‚àß
(‚àÉ m : ‚Ñï, m^2 = putnam_1970_a3_solution.2) ‚àß
L (putnam_1970_a3_solution.2) = putnam_1970_a3_solution.1 ‚àß
(Nat.digits 10 putnam_1970_a3_solution.2)[0]! ‚â† 0 ‚àß
‚àÄ n : ‚Ñï, (Nat.digits 10 (n^2))[0]! ‚â† 0 ‚àß L (n^2) = putnam_1970_a3_solution.1 ‚Üí n^2 ‚â• putnam_1970_a3_solution.2 :=
sorry


open Filter Topology
theorem putnam_1970_a4
(x : ‚Ñï ‚Üí ‚Ñù)
(hxlim : Tendsto (fun n => x n - x (n-2)) atTop (ùìù 0))
: Tendsto (fun n => (x n - x (n-1))/n) atTop (ùìù 0) :=
sorry

noncomputable abbrev putnam_1970_b1_solution : ‚Ñù := sorry
-- Real.exp (2 * Real.log 5 - 4 + 2 * Real.arctan 2)
theorem putnam_1970_b1
: Tendsto (fun n => 1/(n^4) * ‚àè i in Finset.Icc (1 : ‚Ñ§) (2*n), ((n^2 + i^2) : ‚Ñù)^((1 : ‚Ñù)/n)) atTop (ùìù putnam_1970_b1_solution) :=
sorry

theorem putnam_1970_b2
(T : ‚Ñù)
(H : Polynomial ‚Ñù)
(hT : T > 0)
(hH : H.degree ‚â§ 3)
: (H.eval (-T / Real.sqrt 3) + H.eval (T / Real.sqrt 3))/2 = ‚®ç t in Set.Icc (-T) T, H.eval t :=
sorry

theorem putnam_1970_b3
(S : Set (‚Ñù √ó ‚Ñù))
(a b : ‚Ñù)
(hab : a < b)
(hS : ‚àÄ s ‚àà S, s.1 ‚àà Ioo a b)
(hSclosed : IsClosed S)
: IsClosed {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S} :=
sorry

theorem putnam_1970_b4
(x : ‚Ñù ‚Üí ‚Ñù)
(hdiff : DifferentiableOn ‚Ñù x (Set.Icc 0 1) ‚àß DifferentiableOn ‚Ñù (deriv x) (Set.Icc 0 1))
(hx : x 1 - x 0 = 1)
(hv : deriv x 0 = 0 ‚àß deriv x 1 = 0)
(hs : ‚àÄ t ‚àà Set.Ioo 0 1, |deriv x t| ‚â§ 3/2)
: ‚àÉ t ‚àà Set.Icc 0 1, |deriv (deriv x) t| ‚â• 9/2 :=
sorry

theorem putnam_1970_b5
(ramp : ‚Ñ§ ‚Üí (‚Ñù ‚Üí ‚Ñù) := fun n => (fun x => if x ‚â§ -n then -n else (if -n < x ‚àß x ‚â§ n then x else n)))
(F : ‚Ñù ‚Üí ‚Ñù)
: Continuous F ‚Üî (‚àÄ n : ‚Ñï, Continuous ((ramp n) ‚àò F)) :=
sorry

-- TODO: (George) Check for Euclidean.dist errors on Lean version migration
theorem putnam_1970_b6
(L : ZMod 4 ‚Üí EuclideanSpace ‚Ñù (Fin 2))
(S : Set (EuclideanSpace ‚Ñù (Fin 2)) := {L i | i : ZMod 4})
(hSquad : ‚àÄ s ‚äÜ S, s.card = 3 ‚Üí ¬¨ Collinear ‚Ñù s)
(hlens : Euclidean.dist (L 0) (L 1) > 0 ‚àß Euclidean.dist (L 1) (L 2) > 0 ‚àß Euclidean.dist (L 2) (L 3) > 0 ‚àß Euclidean.dist (L 3) (L 0) > 0)
(horder : ‚àÄ i : ZMod 4, segment ‚Ñù (L i) (L (i + 1)) ‚à© interior (convexHull ‚Ñù S) = ‚àÖ)
(hcircum : ‚àÉ (O : EuclideanSpace ‚Ñù (Fin 2)) (r : ‚Ñù), O ‚àà convexHull ‚Ñù S ‚àß r > 0 ‚àß ‚àÄ i : ZMod 4,
‚àÉ! I : EuclideanSpace ‚Ñù (Fin 2), Collinear ‚Ñù {I, L i, L (i + 1)} ‚àß Euclidean.dist O I = r)
(harea : (MeasureTheory.volume (convexHull ‚Ñù S)).toReal =
Real.sqrt (Euclidean.dist (L 0) (L 1) * Euclidean.dist (L 1) (L 2) * Euclidean.dist (L 2) (L 3) * Euclidean.dist (L 3) (L 0)))
: Cospherical S :=
sorry
